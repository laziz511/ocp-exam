

1. How does the JVM know when an object is eligible for garbage collection?

- The JVM waits patiently and monitors each object until it determines that the code no longer needs that memory.
- An object will remain on the heap until it is no longer reachable.

- An object is no longer reachable when one of two situations occurs:
    ■ The object no longer has any references pointing to it.
    ■ All references to the object have gone out of scope.


2. Objects vs. References

- Do not confuse a reference with the object that it refers to; they are two different entities.

- The reference is a variable that has a name and can be used to access the contents of an object.
- A reference can be assigned to another reference, passed to a method, or returned from a method.
- All references are the same size, no matter what their type is.

- An object sits on the heap and does not have a name.
- Therefore, you have no way to access an object except through a reference.
- Objects come in all different shapes and sizes and consume varying amounts of memory.
- An object cannot be assigned to another object, and an object cannot be passed to a method or returned from a method.
- It is the object that gets garbage collected, not its reference.
